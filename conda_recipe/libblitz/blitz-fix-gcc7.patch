This patch fixes blitz for working with gcc 7. This comes from
https://github.com/blitzpp/blitz/pull/16/files
diff -Naur blitz-0.10/blitz/array/expr.h blitz-0.10-fixed/blitz/array/expr.h
--- blitz-0.10/blitz/array/expr.h	2012-06-26 17:22:51.000000000 -0700
+++ blitz-0.10-fixed/blitz/array/expr.h	2018-04-10 09:44:13.810654201 -0700
@@ -37,7 +37,7 @@
 #include <blitz/array/domain.h>
 #include <blitz/array/slice.h>
 #include <blitz/bounds.h>
-
+#include <blitz/tv2fastiter.h> 
 /*
  * The array expression templates iterator interface is followed by
  * these classes:
diff -Naur blitz-0.10/blitz/bzdebug.h blitz-0.10-fixed/blitz/bzdebug.h
--- blitz-0.10/blitz/bzdebug.h	2012-05-11 13:11:13.000000000 -0700
+++ blitz-0.10-fixed/blitz/bzdebug.h	2018-04-10 09:21:47.907561312 -0700
@@ -117,15 +117,15 @@
     }
   }
 
-    #define BZASSERT(X)        checkAssert(X, __FILE__, __LINE__)
-    #define BZPRECONDITION(X)  checkAssert(X, __FILE__, __LINE__)
-    #define BZPOSTCONDITION(X) checkAssert(X, __FILE__, __LINE__)
-    #define BZSTATECHECK(X,Y)  checkAssert(X == Y, __FILE__, __LINE__)
+    #define BZASSERT(X)        blitz::checkAssert(X, __FILE__, __LINE__)
+    #define BZPRECONDITION(X)  blitz::checkAssert(X, __FILE__, __LINE__)
+    #define BZPOSTCONDITION(X) blitz:: checkAssert(X, __FILE__, __LINE__)
+    #define BZSTATECHECK(X,Y)  blitz::checkAssert(X == Y, __FILE__, __LINE__)
     #define BZPRECHECK(X,Y)                                    \
         {                                                      \
             if ((assertFailMode == false) && (!(X)))           \
                 BZ_STD_SCOPE(cerr) << Y << BZ_STD_SCOPE(endl); \
-            checkAssert(X, __FILE__, __LINE__);                \
+	    blitz::checkAssert(X, __FILE__, __LINE__);	       \
         }
 
     #define BZ_DEBUG_MESSAGE(X)                                          \
@@ -138,7 +138,7 @@
         }
 
     #define BZ_DEBUG_PARAM(X) X
-    #define BZ_PRE_FAIL        checkAssert(0)
+    #define BZ_PRE_FAIL        blitz::checkAssert(0)
     #define BZ_ASM_DEBUG_MARKER
 
 #elif defined(BZ_DEBUG)
diff -Naur blitz-0.10/blitz/generate/genstencils.py blitz-0.10-fixed/blitz/generate/genstencils.py
--- blitz-0.10/blitz/generate/genstencils.py	2012-05-11 13:11:13.000000000 -0700
+++ blitz-0.10-fixed/blitz/generate/genstencils.py	2018-04-10 09:22:02.780302779 -0700
@@ -6,7 +6,7 @@
 import sys
 
 os=open(sys.argv[1],'w')
-print "Generating file %s"%sys.argv[1]
+print("Generating file %s"%sys.argv[1])
 
 def BZ_ET_STENCIL_REDIRECT(name):
     stub="""
@@ -104,7 +104,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return iter_.fastRead_tv<N>(i); }
+      return iter_.template fastRead_tv<N>(i); }
       
     T_result shift(int offset, int dim) const				
     {									
@@ -451,7 +451,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return iter_.fastRead_tv<N>(i); }
+      return iter_.template fastRead_tv<N>(i); }
      									
   T_result shift(int offset, int dim) const				
   {									
@@ -590,7 +590,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return iter_.fastRead_tv<N>(i); }
+      return iter_.template fastRead_tv<N>(i); }
 
   T_numtype shift(int offset, int dim) const				
   {									
@@ -728,7 +728,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return iter_.fastRead_tv<N>(i); }
+      return iter_.template fastRead_tv<N>(i); }
 
   T_numtype shift(int offset, int dim) const				
   {									
@@ -871,7 +871,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return typename tvresult<N>::Type(iter_.fastRead_tv<N>(i),dim_); }
+      return typename tvresult<N>::Type(iter_.template fastRead_tv<N>(i),dim_); }
 
   T_result shift(int offset, int dim) const				
   {									
@@ -1023,7 +1023,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return typename tvresult<N>::Type(iter_.fastRead_tv<N>(i),comp_,dim_); }
+      return typename tvresult<N>::Type(iter_.template fastRead_tv<N>(i),comp_,dim_); }
 
   T_numtype shift(int offset, int dim) const				
   {									
@@ -1184,7 +1184,7 @@
     template<int N>
     typename tvresult<N>::Type fastRead_tv(diffType i) const {
       BZPRECHECK(0, "Can't vectorize stencils");
-      return typename tvresult<N>::Type(iter_.fastRead_tv<N>(i),dim1_,dim2_); }
+      return typename tvresult<N>::Type(iter_.template fastRead_tv<N>(i),dim1_,dim2_); }
 
   T_numtype shift(int offset, int dim) const				
   {									
diff -Naur blitz-0.10/blitz/gnu/bzconfig.h blitz-0.10-fixed/blitz/gnu/bzconfig.h
--- blitz-0.10/blitz/gnu/bzconfig.h	2012-07-03 17:10:53.000000000 -0700
+++ blitz-0.10-fixed/blitz/gnu/bzconfig.h	2018-04-10 09:22:34.623890304 -0700
@@ -420,12 +420,12 @@
 
 /* date */
 #ifndef BZ__config_date 
-#define BZ__config_date "Tue Jul  3 17:10:48 PDT 2012" 
+#define BZ__config_date "Tue Apr 10 09:11:41 PDT 2018" 
 #endif
 
 /* uname -a */
 #ifndef BZ__os_name 
-#define BZ__os_name "Linux midgard.cacr 3.0.0-12-generic #20-Ubuntu SMP Fri Oct 7 14:56:25 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux" 
+#define BZ__os_name "Linux pistol.jpl.nasa.gov 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux" 
 #endif
 
 /* target */
